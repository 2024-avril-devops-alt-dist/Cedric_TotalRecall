
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 

 

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id_user], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id_user], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model User {
  id_user       String       @id @default(auto()) @map("_id") @db.ObjectId
  password      String
  phone         String?
  role          String       @default("USER")
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  passengers    Passenger[]
  travels       Travel[]     @relation("UserTravels")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("User")
}

model Passenger {
  id_passenger  String       @id @default(auto()) @map("_id") @db.ObjectId
  first_name    String
  last_name     String
  mail          String?
  DOB           DateTime
  user          User?        @relation(fields: [userId], references: [id_user])
  userId        String?      @db.ObjectId

  @@map("Passenger")
}

model Company {
  id_company    String       @id @default(auto()) @map("_id") @db.ObjectId
  company_name  String
  travels       Travel[]     @relation("CompanyTravels")
  reservations  Reservation[]

  @@map("Company")
}

model Station {
  id_station       String     @id @default(auto()) @map("_id") @db.ObjectId
  station_name     String
  departure_flights Flight[]  @relation("DepartureFlights")
  arrival_flights   Flight[]  @relation("ArrivalFlights")

  @@map("Station")
}

model Travel {
  id_travel      String       @id @default(auto()) @map("_id") @db.ObjectId
  travel_company String       @db.ObjectId
  status_travel  String
  flights        Flight[]
  reservations   Reservation[]
  company        Company?     @relation("CompanyTravels", fields: [travel_company], references: [id_company])
  user           User?        @relation("UserTravels", fields: [userId], references: [id_user])
  userId         String?      @db.ObjectId

  @@map("Travel")
}

model Flight {
  id_flight            String     @id @default(auto()) @map("_id") @db.ObjectId
  id_travel            String     @db.ObjectId
  departure_station    String     @db.ObjectId
  arrival_station      String     @db.ObjectId
  departure_day_time   DateTime
  arrival_day_time     DateTime
  seats                Int
  travel               Travel     @relation(fields: [id_travel], references: [id_travel])
  departureStation     Station    @relation("DepartureFlights", fields: [departure_station], references: [id_station])
  arrivalStation       Station    @relation("ArrivalFlights", fields: [arrival_station], references: [id_station])

  @@map("Flight")
}

model Reservation {
  id_reservation     String     @id @default(auto()) @map("_id") @db.ObjectId
  id_travel          String     @db.ObjectId
  id_company         String     @db.ObjectId
  id_user            String     @db.ObjectId
  id_passenger       String
  status_reservation String?
  travel             Travel     @relation(fields: [id_travel], references: [id_travel])
  company            Company    @relation(fields: [id_company], references: [id_company])
  user               User       @relation(fields: [id_user], references: [id_user])

  @@map("Reservation")
}
